{"version":3,"sources":["components/map/map.js","utils.js","components/header/header.js","components/footer/footer.js","App.js","serviceWorker.js","index.js"],"names":["MapComponent","props","className","title","style","width","height","frameBorder","src","lat","long","allowFullScreen","Header","city","country","Footer","fact","App","state","axios","get","then","res","data","setState","longitude","catch","err","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mWAsBeA,G,YAjBM,SAACC,GAElB,OACI,yBAAKC,UAAU,iBACX,yBAAKA,UAAU,OACX,4BACIC,MAAM,QACNC,MAAO,CAAEC,MAAO,QAASC,OAAQ,SACjCC,YAAY,IACZC,IAAG,yDCZA,0CDYA,oCACEP,EAAMQ,IADR,YACeR,EAAMS,MAAQC,iBAAe,QEGpDC,G,MAdA,SAACX,GAGZ,OACI,4BAASC,UAAU,UAAnB,2BAEM,6BACF,6BAAM,mBACF,wCAAUD,EAAMY,KAAhB,aAAyBZ,EAAMa,cCQhCC,G,MAhBA,SAACd,GAGZ,IAAMe,EAAsB,iBAAff,EAAMY,KACb,2BACe,cAAfZ,EAAMY,KACF,wCACA,kEAEV,OACI,6BAASX,UAAU,UACbc,KCkDCC,E,YAtDb,WAAYhB,GAAQ,IAAD,8BACjB,4CAAMA,KACDiB,MAAQ,CACXL,KAAM,GACNC,QAAS,GACTL,IAAK,GACLC,KAAM,GACNM,KAAM,IAPS,E,iFAWE,IAAD,OAElBG,IAAMC,IAAN,yCHxBqB,6DGyBlBC,MAAK,SAAAC,GACJ,IAAMC,EAAOD,EAAIC,KACjB,EAAKC,SAAS,CACZX,KAAMU,EAAI,KACVT,QAASS,EAAI,aACbd,IAAKc,EAAI,SACTb,KAAMa,EAAKE,eAGdC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,GACZ,EAAKH,SAAS,CACZX,KAAM,YACNC,QAAS,WACTL,IAAK,YACLC,KAAM,mB,+BAQZ,OACE,yBAAKR,UAAU,OACb,kBAAC,EAAD,CACEW,KAAMiB,KAAKZ,MAAML,KACjBC,QAASgB,KAAKZ,MAAMJ,UACtB,kBAAC,EAAD,CAAcZ,UAAU,gBACtBW,KAAMiB,KAAKZ,MAAML,KACjBC,QAASgB,KAAKZ,MAAMJ,QACpBL,IAAKqB,KAAKZ,MAAMT,IAChBC,KAAMoB,KAAKZ,MAAMR,OAEnB,kBAAC,EAAD,CAAQG,KAAMiB,KAAKZ,MAAML,Y,GAjDfkB,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,kB","file":"static/js/main.1ea3a8cc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { mapsKey } from '../../utils';\r\nimport './map.css';\r\n\r\nconst MapComponent = (props) => {\r\n\r\n    return (\r\n        <div className=\"map_component\">\r\n            <div className=\"map\">\r\n                <iframe\r\n                    title=\"title\"\r\n                    style={{ width: '100vw', height: '100vh' }}\r\n                    frameBorder=\"0\"\r\n                    src={`https://www.google.com/maps/embed/v1/place?key=${mapsKey}\r\n                    &q=${props.lat},${props.long}`} allowFullScreen>\r\n                </iframe>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MapComponent;","export const IPDataKey = 'b0b8cd08bd4c1824cd4df64ab44f6975fc71e6ba25914603fe048c61';\r\n\r\nexport const mapsKey = 'AIzaSyCdQymwSuF0P6Ee-ffX0ZtWjpJdpaT5eLk';","import React from 'react';\r\n\r\nimport './header.css';\r\n\r\nconst Header = (props) => {\r\n\r\n\r\n    return (\r\n        < header className=\"header\" >\r\n            {`Where... where am I?`\r\n            } <br />\r\n            <div>{'Well, you\\'re in '}\r\n                <span>{`${props.city}, ${props.country}`}</span>\r\n            </div>\r\n        </header >\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nimport './footer.css';\r\n\r\nconst Footer = (props) => {\r\n\r\n\r\n    const fact = props.city === 'Hidden Hills'\r\n        ? 'Yay! Right next to Kanye'\r\n        : props.city === 'Somewhere'\r\n            ? 'It seems like something went wrong...'\r\n            : 'Nope. You\\'re still far from Kanye... Maybe that\\'s for the best.';\r\n\r\n    return (\r\n        <section className=\"footer\">\r\n            { fact  }\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\nimport axios from 'axios';\n\nimport './App.css';\n\nimport { IPDataKey } from './utils';\nimport MapComponent from './components/map/map';\nimport Header from './components/header/header';\nimport Footer from './components/footer/footer';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      city: '',\n      country: '',\n      lat: '',\n      long: '',\n      fact: ''\n    }\n  }\n\n  componentDidMount() {\n\n    axios.get(`https://api.ipdata.co/?api-key=${IPDataKey}`)\n      .then(res => {\n        const data = res.data;\n        this.setState({\n          city: data['city'],\n          country: data['country_name'],\n          lat: data['latitude'],\n          long: data.longitude\n        });\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({\n          city: 'Somewhere',\n          country: 'Anywhere',\n          lat: '29.903909',\n          long: '34.999227'\n        })\n      })\n  }\n\n\n\n  render() {\n    return (\n      <div className=\"App\" >\n        <Header \n          city={this.state.city} \n          country={this.state.country}/>\n        <MapComponent className=\"map_component\"\n          city={this.state.city}\n          country={this.state.country}\n          lat={this.state.lat}\n          long={this.state.long}\n        />\n        <Footer city={this.state.city} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}